# Generated by Django 2.2.1 on 2019-05-22 17:55

import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('foundation', '0003_auto_20190521_2159'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='timeseriesdatum',
            name='file',
        ),
        migrations.RemoveField(
            model_name='timeseriesdatum',
            name='image',
        ),
        migrations.RemoveField(
            model_name='timeseriesdatum',
            name='values',
        ),
        migrations.CreateModel(
            name='TimeSeriesJSONDatum',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='The date and time this datum was recorded at.', verbose_name='Timestamp')),
                ('time_step', models.TimeField(help_text='The time difference between the previous time series datum to this time-series datum.', verbose_name='Time Step')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this time-series datum.', null=True, srid=4326, verbose_name='Location')),
                ('image_value', models.ImageField(blank=True, help_text='The image file of the time-series datum.', null=True, upload_to='uploads/time-series-data/%Y/%m/%d/', verbose_name='Image Value')),
                ('created_from', models.GenericIPAddressField(blank=True, editable=False, help_text='The IP address of the creator.', null=True, verbose_name='Created from IP')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, editable=False, help_text='Is creator a public IP and is routable.', verbose_name='Is created from IP public?')),
                ('instrument', models.ForeignKey(help_text='The instrument this datum belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='time_series_json_data', to='foundation.Instrument')),
                ('next', models.ForeignKey(blank=True, editable=False, help_text='The next time-series datum in the chain of successive invoices based on time.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='foundation.TimeSeriesJSONDatum')),
                ('previous', models.ForeignKey(blank=True, editable=False, help_text='The previous time-series datum in the chain of successive invoices based on time.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='foundation.TimeSeriesJSONDatum')),
            ],
            options={
                'verbose_name': 'Time-Series JSON Datum',
                'verbose_name_plural': 'Time-Series JSON Data',
                'db_table': 'mika_time_series_json_data',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesImageDatum',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='The date and time this datum was recorded at.', verbose_name='Timestamp')),
                ('time_step', models.TimeField(help_text='The time difference between the previous time series datum to this time-series datum.', verbose_name='Time Step')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this time-series datum.', null=True, srid=4326, verbose_name='Location')),
                ('image_value', models.ImageField(blank=True, help_text='The image file of the time-series datum.', null=True, upload_to='uploads/time-series-data/%Y/%m/%d/', verbose_name='Image Value')),
                ('created_from', models.GenericIPAddressField(blank=True, editable=False, help_text='The IP address of the creator.', null=True, verbose_name='Created from IP')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, editable=False, help_text='Is creator a public IP and is routable.', verbose_name='Is created from IP public?')),
                ('instrument', models.ForeignKey(help_text='The instrument this datum belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='time_series_image_data', to='foundation.Instrument')),
                ('next', models.ForeignKey(blank=True, editable=False, help_text='The next time-series datum in the chain of successive invoices based on time.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='foundation.TimeSeriesImageDatum')),
                ('previous', models.ForeignKey(blank=True, editable=False, help_text='The previous time-series datum in the chain of successive invoices based on time.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='foundation.TimeSeriesImageDatum')),
            ],
            options={
                'verbose_name': 'Time-Series Image Datum',
                'verbose_name_plural': 'Time-Series Image Data',
                'db_table': 'mika_time_series_image_data',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.AddIndex(
            model_name='timeseriesjsondatum',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['timestamp'], name='mika_time_s_timesta_edea0e_brin'),
        ),
        migrations.AlterUniqueTogether(
            name='timeseriesjsondatum',
            unique_together={('instrument', 'timestamp')},
        ),
        migrations.AddIndex(
            model_name='timeseriesimagedatum',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['timestamp'], name='mika_time_s_timesta_cc0ffc_brin'),
        ),
        migrations.AlterUniqueTogether(
            name='timeseriesimagedatum',
            unique_together={('instrument', 'timestamp')},
        ),
    ]
