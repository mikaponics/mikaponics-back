# Generated by Django 2.2.1 on 2019-05-20 22:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('foundation', '0006_auto_20190520_2208'),
    ]

    operations = [
        migrations.CreateModel(
            name='CropLifeSupportCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_humidity', models.FloatField(help_text='The maximum acceptable humidity value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Humidity')),
                ('min_humidity', models.FloatField(help_text='The minimum acceptable humidity value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Humidity')),
                ('max_air_temperature', models.FloatField(help_text='The maximum acceptable air temperature value this crop can accept for this life-cycle stage. Measured in celsius.', validators=[django.core.validators.MinValueValidator(-100.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Air Temperature')),
                ('min_air_temperature', models.FloatField(help_text='The minimum acceptable air temperature value this crop can accept for this life-cycle stage. Measured in celsius.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Air Temperature')),
                ('max_water_temperature', models.FloatField(help_text='The maximum acceptable water temperature value this crop can accept for this life-cycle stage. Measured in celsius.', validators=[django.core.validators.MinValueValidator(-100.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Water Temperature')),
                ('min_water_temperature', models.FloatField(help_text='The minimum acceptable water temperature value this crop can accept for this life-cycle stage. Measured in celsius.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Water Temperature')),
                ('max_ph', models.FloatField(help_text='The maximum acceptable pH value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(14)], verbose_name='Max pH')),
                ('min_ph', models.FloatField(help_text='The minimum acceptable pH value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(14)], verbose_name='Max pH')),
                ('max_ec', models.FloatField(help_text='The maximum acceptable EC value this crop can accept for this life-cycle stage.', verbose_name='Max EC')),
                ('min_ec', models.FloatField(help_text='The minimum acceptable EC value this crop can accept for this life-cycle stage.', verbose_name='Max EC')),
                ('max_orp', models.FloatField(help_text='The maximum acceptable ORP value this crop can accept for this life-cycle stage.', verbose_name='Max ORP')),
                ('min_orp', models.FloatField(help_text='The minimum acceptable ORP value this crop can accept for this life-cycle stage.', verbose_name='Max ORP')),
                ('max_ppm', models.FloatField(help_text='The maximum acceptable PPM value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(3000)], verbose_name='Max PPM')),
                ('min_ppm', models.FloatField(help_text='The minimum acceptable PPM value this crop can accept for this life-cycle stage.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(3000)], verbose_name='Max PPM')),
                ('max_co2', models.FloatField(help_text='The maximum acceptable CO2 value this crop can accept for this life-cycle stage.', verbose_name='Max CO2')),
                ('min_co2', models.FloatField(help_text='The minimum acceptable CO2 value this crop can accept for this life-cycle stage.', verbose_name='Max CO2')),
                ('max_uv', models.FloatField(help_text='The maximum acceptable UV value this crop can accept for this life-cycle stage.', verbose_name='Max UV')),
                ('min_uv', models.FloatField(help_text='The minimum acceptable CO2 value this crop can accept for this life-cycle stage.', verbose_name='Max UV')),
                ('data_sheet', models.ForeignKey(help_text='The crop data-sheet this optimal grow condition belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='foundation.CropDataSheet')),
                ('stage', models.ForeignKey(help_text='The life cycle stage that this optimal grow condition belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='foundation.CropLifeCycleStage')),
            ],
            options={
                'verbose_name': 'Crop Life Support Condition',
                'verbose_name_plural': 'Crop Life Support Conditions',
                'db_table': 'mika_crop_life_support_condition',
                'permissions': (),
                'default_permissions': (),
                'unique_together': {('data_sheet', 'stage')},
                'index_together': {('data_sheet', 'stage')},
            },
        ),
    ]
